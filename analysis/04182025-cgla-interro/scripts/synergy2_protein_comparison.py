#!/usr/bin/env python3
"""
synergy2_protein_comparison.py - Compare SYNERGY2 internal proteins with gffread translations
"""

import argparse
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns
from Bio import SeqIO
from Bio.Seq import Seq
from Bio.SeqRecord import SeqRecord
from collections import defaultdict
import os
import re

def parse_synergy2_annotations(annotations_file):
    """Parse SYNERGY2 annotations.txt file to extract protein sequences"""
    proteins = {}
    
    with open(annotations_file, 'r') as f:
        for line in f:
            fields = line.strip().split('\t')
            if len(fields) >= 8:
                gene_id = fields[0]
                synergy_id = fields[1]
                seq = fields[7]
                proteins[gene_id] = {
                    'synergy_id': synergy_id,
                    'sequence': seq
                }
    
    print(f"Parsed {len(proteins)} proteins from SYNERGY2 annotations")
    if proteins:
        sample_keys = list(proteins.keys())[:5]
        print(f"Sample gene IDs: {sample_keys}")
    return proteins

def parse_gffread_fasta(fasta_file):
    """Parse protein FASTA file generated by gffread"""
    proteins = {}
    
    for record in SeqIO.parse(fasta_file, 'fasta'):
        # Handle different formats of FASTA headers
        # Format: CAGL0A00099g-T or similar
        header = record.id
        gene_id = header.split('-')[0]  # Remove the -T or other suffixes
        
        proteins[gene_id] = {
            'sequence': str(record.seq)
        }
    
    print(f"Parsed {len(proteins)} proteins from gffread FASTA")
    if proteins:
        sample_keys = list(proteins.keys())[:5]
        print(f"Sample gene IDs: {sample_keys}")
    return proteins

def analyze_sequences(synergy_proteins, gffread_proteins, output_dir):
    """Analyze and compare protein sequences from both sources"""
    # Prepare results storage
    results = []
    
    # Find common gene IDs
    common_genes = set(synergy_proteins.keys()) & set(gffread_proteins.keys())
    print(f"Found {len(common_genes)} genes in both datasets")
    
    for gene_id in common_genes:
        synergy_seq = synergy_proteins[gene_id]['sequence']
        gffread_seq = gffread_proteins[gene_id]['sequence']
        
        # Calculate basic metrics
        synergy_len = len(synergy_seq)
        gffread_len = len(gffread_seq)
        synergy_stops = synergy_seq.count('*')
        gffread_stops = gffread_seq.count('*')
        
        # Calculate simple identity (percentage of matching positions)
        min_len = min(synergy_len, gffread_len)
        matches = sum(s == g for s, g in zip(synergy_seq[:min_len], gffread_seq[:min_len]))
        identity = (matches / min_len) * 100 if min_len > 0 else 0
        
        # Calculate length ratio
        len_ratio = synergy_len / gffread_len if gffread_len > 0 else float('inf')
        
        # Check if synergy protein has premature stops (more than the standard terminal stop)
        has_premature_stops = synergy_stops > 1
        
        results.append({
            'gene_id': gene_id,
            'synergy_id': synergy_proteins[gene_id]['synergy_id'],
            'synergy_length': synergy_len,
            'gffread_length': gffread_len,
            'synergy_stops': synergy_stops,
            'gffread_stops': gffread_stops,
            'identity': identity,
            'length_ratio': len_ratio,
            'has_premature_stops': has_premature_stops
        })
    
    # Convert to DataFrame for analysis
    df = pd.DataFrame(results)
    
    # Generate visualizations
    create_visualizations(df, output_dir)
    
    return df

def create_visualizations(df, output_dir):
    """Generate visualizations of the comparison results"""
    # Set up the plot style
    sns.set(style="whitegrid")
    plt.rcParams.update({'font.size': 12})
    
    # 1. Identity distribution
    plt.figure(figsize=(10, 6))
    sns.histplot(df['identity'], bins=50, kde=True)
    plt.axvline(x=90, color='red', linestyle='--', label='90% Identity Threshold')
    plt.title('Sequence Identity Distribution')
    plt.xlabel('Identity (%)')
    plt.ylabel('Count')
    plt.legend()
    plt.tight_layout()
    plt.savefig(f"{output_dir}/identity_distribution.png", dpi=300)
    plt.close()
    
    # 2. Length ratio distribution
    plt.figure(figsize=(10, 6))
    # Filter out extreme ratios for better visualization
    filtered_df = df[df['length_ratio'] <= 5]
    sns.histplot(filtered_df['length_ratio'], bins=50, kde=True)
    plt.axvline(x=1, color='red', linestyle='--', label='Equal Length')
    plt.title('Length Ratio Distribution (SYNERGY2 / gffread)')
    plt.xlabel('Length Ratio')
    plt.ylabel('Count')
    plt.legend()
    plt.tight_layout()
    plt.savefig(f"{output_dir}/length_ratio_distribution.png", dpi=300)
    plt.close()
    
    # 3. Stop codon counts
    plt.figure(figsize=(10, 6))
    sns.histplot(df['synergy_stops'], bins=range(0, 21), kde=False, discrete=True)
    plt.title('Stop Codon Count in SYNERGY2 Proteins')
    plt.xlabel('Number of Stop Codons')
    plt.ylabel('Count')
    plt.tight_layout()
    plt.savefig(f"{output_dir}/stop_codon_distribution.png", dpi=300)
    plt.close()
    
    # 4. Identity vs. Length Ratio scatter plot
    plt.figure(figsize=(10, 8))
    # Filter extreme values for better visualization
    plot_df = df[(df['length_ratio'] <= 5) & (df['length_ratio'] > 0)]
    sns.scatterplot(x='identity', y='length_ratio', data=plot_df, alpha=0.5)
    plt.axhline(y=1, color='red', linestyle='--')
    plt.axvline(x=90, color='red', linestyle='--')
    plt.title('Identity vs. Length Ratio')
    plt.xlabel('Identity (%)')
    plt.ylabel('Length Ratio (SYNERGY2 / gffread)')
    plt.tight_layout()
    plt.savefig(f"{output_dir}/identity_vs_length.png", dpi=300)
    plt.close()
    
    # 5. Premature stop codon percentage
    premature_stop_pct = df['has_premature_stops'].mean() * 100
    correct_pct = 100 - premature_stop_pct
    
    plt.figure(figsize=(8, 8))
    plt.pie([correct_pct, premature_stop_pct], 
            labels=['No premature stops', 'Has premature stops'],
            autopct='%1.1f%%',
            colors=['#4CAF50', '#F44336'],
            startangle=90)
    plt.title('Percentage of SYNERGY2 Proteins with Premature Stop Codons')
    plt.tight_layout()
    plt.savefig(f"{output_dir}/premature_stops_pie.png", dpi=300)
    plt.close()
    
    # 6. Bimodal distribution visualization - combining identity and stop codons
    plt.figure(figsize=(10, 6))
    # Create categorical variable based on identity threshold
    df['identity_group'] = pd.cut(
        df['identity'], 
        bins=[0, 50, 90, 100], 
        labels=['Low (<50%)', 'Medium (50-90%)', 'High (>90%)']
    )
    # Plot count of genes in each category
    identity_counts = df['identity_group'].value_counts().sort_index()
    ax = identity_counts.plot(kind='bar', color=['#FF9999', '#FFCC99', '#99CC99'])
    plt.title('Distribution of Protein Identity Categories')
    plt.xlabel('Identity Category')
    plt.ylabel('Number of Proteins')
    
    # Add percentage labels
    total = len(df)
    for i, count in enumerate(identity_counts):
        percentage = 100 * count / total
        ax.text(i, count + 5, f"{percentage:.1f}%", ha='center')
    
    plt.tight_layout()
    plt.savefig(f"{output_dir}/identity_categories.png", dpi=300)
    plt.close()
    
    # 7. Summary statistics
    high_identity = (df['identity'] >= 90).mean() * 100
    equal_length = ((df['length_ratio'] >= 0.9) & (df['length_ratio'] <= 1.1)).mean() * 100
    
    stats = pd.DataFrame({
        'Metric': [
            'Proteins with ≥90% identity',
            'Proteins with similar length (±10%)',
            'Proteins with premature stop codons',
            'Mean sequence identity',
            'Median sequence identity',
            'Mean length ratio',
            'Median length ratio'
        ],
        'Value': [
            f"{high_identity:.1f}%",
            f"{equal_length:.1f}%",
            f"{premature_stop_pct:.1f}%",
            f"{df['identity'].mean():.1f}%",
            f"{df['identity'].median():.1f}%",
            f"{df['length_ratio'].mean():.2f}",
            f"{df['length_ratio'].median():.2f}"
        ]
    })
    
    stats.to_csv(f"{output_dir}/summary_statistics.csv", index=False)
    
    # 8. Save the full results
    df.to_csv(f"{output_dir}/detailed_comparison.csv", index=False)

def main():
    parser = argparse.ArgumentParser(description='Compare SYNERGY2 proteins with gffread translations')
    parser.add_argument('--synergy', required=True, help='Path to SYNERGY2 annotations.txt file')
    parser.add_argument('--gffread', required=True, help='Path to protein FASTA file from gffread')
    parser.add_argument('--output', default='protein_comparison', help='Output directory for results')
    
    args = parser.parse_args()
    
    os.makedirs(args.output, exist_ok=True)
    
    print(f"Parsing SYNERGY2 annotations from: {args.synergy}")
    synergy_proteins = parse_synergy2_annotations(args.synergy)
    
    print(f"Parsing gffread proteins from: {args.gffread}")
    gffread_proteins = parse_gffread_fasta(args.gffread)
    
    print("Analyzing sequences...")
    df = analyze_sequences(synergy_proteins, gffread_proteins, args.output)
    
    print(f"Analysis complete. Results saved to: {args.output}")
    
    # Print summary information
    high_identity = (df['identity'] >= 90).mean() * 100
    premature_stop_pct = df['has_premature_stops'].mean() * 100
    
    print("\nSummary Results:")
    print(f"Total proteins analyzed: {len(df)}")
    print(f"Proteins with ≥90% identity: {high_identity:.1f}%")
    print(f"Proteins with premature stop codons: {premature_stop_pct:.1f}%")
    print(f"Mean sequence identity: {df['identity'].mean():.1f}%")
    
    print("\nThis comparison confirms whether SYNERGY2 is using exon coordinates for translation.")
    print("If our hypothesis is correct, we should see a high percentage of proteins with")
    print("translation errors (premature stops, low identity to gffread proteins).")

if __name__ == "__main__":
    main()
